/*
Digital Value Services API

Testing TransactionsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package dvsapi

import (
	"context"
	openapiclient "github.com/josnidhin/go-openapi-codegen-examples/dvsclient/dvsapi"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_dvsapi_TransactionsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test TransactionsApiService GetTransactionById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var transactionId int64

		resp, httpRes, err := apiClient.TransactionsApi.GetTransactionById(context.Background(), transactionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TransactionsApiService GetTransactions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.TransactionsApi.GetTransactions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TransactionsApiService PostTransactionAsync", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.TransactionsApi.PostTransactionAsync(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TransactionsApiService PostTransactionCancel", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var transactionId int64

		resp, httpRes, err := apiClient.TransactionsApi.PostTransactionCancel(context.Background(), transactionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TransactionsApiService PostTransactionConfirmAsync", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var transactionId int64

		resp, httpRes, err := apiClient.TransactionsApi.PostTransactionConfirmAsync(context.Background(), transactionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TransactionsApiService PostTransactionConfirmSync", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var transactionId int64

		resp, httpRes, err := apiClient.TransactionsApi.PostTransactionConfirmSync(context.Background(), transactionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TransactionsApiService PostTransactionSync", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.TransactionsApi.PostTransactionSync(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
